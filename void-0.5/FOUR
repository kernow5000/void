
if [ "$1" = "checkin" ]; then
# check we have a voidinfo file in this project directory
test -r "./VOIDINFO"
if [ $? = "0" ]; then
  echo "Reading project information file."
  echo
  # patched from source to . for ubuntu 7.10
  . "./VOIDINFO"
  # using this we could do further checking on the VOIDINFO file
  
  # otherwise list the project details before checking in
  echo "\tProject Name \t\t: $PROJECT_NAME"
  echo "\tProject Description \t: $PROJECT_DESCRIPTION"
  echo "\tProject Author \t\t: $PROJECT_AUTHOR"
  echo "\tProject Version \t: $PROJECT_VERSION"
  echo "\nAdding project to Void at $VOID"
  cd ..
  tar cvf $PROJECT_NAME.tar `basename $OLDPWD`/*
  # do we need even better intelligent checking in? more stringent VOIDINFO checking
  # its better but not perfect
  if [ -z $PROJECT_VERSION ]; then
    mv $PROJECT_NAME.tar $VOID/$PROJECT_NAME.void
  else
  if [ $PROJECT_VERSION = "" ]; then
    mv $PROJECT_NAME.tar $VOID/$PROJECT_NAME.void
  else
    mv $PROJECT_NAME.tar $VOID/$PROJECT_NAME-$PROJECT_VERSION.void
  fi
  fi
  echo "\nProject $PROJECT_NAME added to void successfully."
else
  echo "Fatal error - no VOIDINFO project information file found."
  echo "Please create a corresponding VOIDINFO file in this project directory."
  exit 1
fi
fi

if [ "$1" = "checkout" ]; then
# we need to make sure they specified a legal project
# and untar it into their current working directory, as a subdirectory
test -z $2
if [ "$?" = 0 ]; then
  echo "Error - Please specify a void project name (no .void extension needed) to check out.\n"
  exit 1
else
  VOIDPROJ=$2
  echo "\nChecking out void project '$VOIDPROJ'"
  echo "Fetching void project '$VOIDPROJ'"
  # is all this info necessary?
  tar xvf $VOID/$VOIDPROJ -C . 2> /dev/null
  if [ "$?" = "0" ]; then
    echo "Project '$VOIDPROJ' checked out successfully.\n"
  else 
    echo "Error in checking out project '$VOIDPROJ'\n"
    exit 1
  fi
  fi
fi

# search for a project, just to aid with piping
# show the projects files
if [ "$1" = "search" ]; then
  test -z $2
  if [ $? = 0 ]; then
    echo "Error - Please specify a void project name (no .void extension needed).\n"
    exit 1
  else
    SEARCHFOR=$2
    # use find or grep
    result=$(ls $VOID | grep $SEARCHFOR)
    echo $result
    # if you want paged output do it yourself :)
    if [ $? != 0 ]; then 
      echo "Error searching for $VOIDPROJ\n"
      exit 1
    fi
  fi
fi

# dump a tarball of a project asked for
if [ "$1" = "tarball" ]; then
  # check second parameter
  test -z $2
  if [ "$?" = 0 ]; then
    echo "Error - Please specify a void project name (no .void extension needed).\n"
    exit 1
  else
    VOIDPROJ=$2
    echo "\nChecking out void project '$VOIDPROJ' as tarball"
    test -r $VOID/$VOIDPROJ.void
    if [ $? = 1 ]; then
      echo "Invalid void project specified, use 'void list' to see the projects in the void.\n"
      exit 1
    else
    # now get the tarball out of the void
    echo "Fetching void project '$VOIDPROJ'"
    cp $VOID/$VOIDPROJ.void ./$VOIDPROJ.tar 2> /dev/null
    # check it dumped to a tarball ok
    if [ $? = 0 ]; then
      echo "Project '$VOIDPROJ' checked out as tarball successfully.\n"
    else
      echo "Error in checking out project '$VOIDPROJ'\n"
      exit 1
    fi
    fi
  fi
fi

# show the projects files
if [ "$1" = "files" ]; then
  test -z $2
  if [ $? = 0 ]; then
    echo "Error - Please specify a void project name (no .void extension needed).\n"
    exit 1
  else
    VOIDPROJ=$2
    tar ft $VOID/$VOIDPROJ 2> /dev/null
    # if you want paged output do it yourself :)
    if [ $? != 0 ]; then 
      echo "Error in listing project files for $VOIDPROJ\n"
      exit 1
    fi
  fi
fi

# snapshot function
if [ $1 = "snapshot" ]; then
  echo "Creating void filesystem snapshot."
  s=$(echo `date` | tr ' ' _)
  mkdir $VOID/.void-$s.snapshot
  cp -R $VOID/* $VOID/.void-$s.snapshot
  echo "$VOID/.void-$s.snapshot created."
fi

# dump void to local directory
if [ $1 = "dump" ]; then
  echo "Creating void dump to local directory."
  s=$(echo `date` | tr ' ' _)
  mkdir void-$s.dump
  cp -R $VOID/* void-$s.dump
  echo "void-$s.dump created."
fi

# delete a project in the void
if [ "$1" = "delete" ]; then
  # check second parameter
  test -z $2
  if [ "$?" = 0 ]; then
    echo "Error - Please specify a void project name (no .void extension needed).\n"
    exit 1
  else
    VOIDPROJ=$2
    echo "\nDeleting void project '$VOIDPROJ'"
    #test -r $VOID/$VOIDPROJ.void
    if [ $? = 1 ]; then
      echo "Invalid void project specified, use 'void list' to see the projects in the void.\n"
      exit 1
    else
    # now get the tarball out of the void
    rm $VOID/$VOIDPROJ 2> /dev/null
    # check it dumped to a tarball ok
    if [ $? = 0 ]; then
      echo "Project '$VOIDPROJ' deleted successfully.\n"
    else
      echo "Error deleting project '$VOIDPROJ'\n"
      exit 1
    fi
    fi
  fi
fi

